/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BYFOFirebaseAdapter, Metadata } from "byfo-utils";
import { RejoinData } from "byfo-utils/dist/types";
export { BYFOFirebaseAdapter, Metadata } from "byfo-utils";
export { RejoinData } from "byfo-utils/dist/types";
export namespace Components {
    interface TpCanvas {
        "exportDrawing": () => Promise<Blob>;
        "height": number;
        "hostEl": HTMLElement;
        "restoreBackup": (pathsString: any) => Promise<void>;
        "width": number;
    }
    interface TpCanvasControls {
        "hostEl": HTMLElement;
        "submithandler": (e: Event) => void;
    }
    interface TpContent {
        "content": string;
        "sendingTo": string;
        "type": string;
    }
    interface TpIcon {
        "icon": any;
    }
    interface TpInputZone {
        "characterLimit": number;
        "round": number;
        "sendingTo": string;
    }
    interface TpMetadataModal {
        "enabled": boolean;
        "gameid": string;
        "metadata": Metadata;
    }
    interface TpReviewChat {
        "showAll": any;
        "stackProxy": any;
    }
    interface TpRoutingModal {
        "enabled": boolean;
        "firebase": BYFOFirebaseAdapter;
        "rejoin"?: RejoinData | null;
        "type": 'host' | 'join' | 'result' | undefined;
    }
    interface TpSettingsModal {
        "buildDate": { year: string; full: string; date: Date };
        "enabled": boolean;
        "store": any;
    }
    interface TpTimeInput {
        "initialValue": any;
        "maxMinutes": any;
        "maxSeconds": any;
        "placeholder": any;
        "timeError": string;
        "value": number;
    }
    interface TpTimer {
        "endtime": number;
    }
    interface TpTutorialModal {
        "enabled": boolean;
    }
}
declare global {
    interface HTMLTpCanvasElement extends Components.TpCanvas, HTMLStencilElement {
    }
    var HTMLTpCanvasElement: {
        prototype: HTMLTpCanvasElement;
        new (): HTMLTpCanvasElement;
    };
    interface HTMLTpCanvasControlsElement extends Components.TpCanvasControls, HTMLStencilElement {
    }
    var HTMLTpCanvasControlsElement: {
        prototype: HTMLTpCanvasControlsElement;
        new (): HTMLTpCanvasControlsElement;
    };
    interface HTMLTpContentElement extends Components.TpContent, HTMLStencilElement {
    }
    var HTMLTpContentElement: {
        prototype: HTMLTpContentElement;
        new (): HTMLTpContentElement;
    };
    interface HTMLTpIconElement extends Components.TpIcon, HTMLStencilElement {
    }
    var HTMLTpIconElement: {
        prototype: HTMLTpIconElement;
        new (): HTMLTpIconElement;
    };
    interface HTMLTpInputZoneElement extends Components.TpInputZone, HTMLStencilElement {
    }
    var HTMLTpInputZoneElement: {
        prototype: HTMLTpInputZoneElement;
        new (): HTMLTpInputZoneElement;
    };
    interface HTMLTpMetadataModalElement extends Components.TpMetadataModal, HTMLStencilElement {
    }
    var HTMLTpMetadataModalElement: {
        prototype: HTMLTpMetadataModalElement;
        new (): HTMLTpMetadataModalElement;
    };
    interface HTMLTpReviewChatElement extends Components.TpReviewChat, HTMLStencilElement {
    }
    var HTMLTpReviewChatElement: {
        prototype: HTMLTpReviewChatElement;
        new (): HTMLTpReviewChatElement;
    };
    interface HTMLTpRoutingModalElement extends Components.TpRoutingModal, HTMLStencilElement {
    }
    var HTMLTpRoutingModalElement: {
        prototype: HTMLTpRoutingModalElement;
        new (): HTMLTpRoutingModalElement;
    };
    interface HTMLTpSettingsModalElement extends Components.TpSettingsModal, HTMLStencilElement {
    }
    var HTMLTpSettingsModalElement: {
        prototype: HTMLTpSettingsModalElement;
        new (): HTMLTpSettingsModalElement;
    };
    interface HTMLTpTimeInputElement extends Components.TpTimeInput, HTMLStencilElement {
    }
    var HTMLTpTimeInputElement: {
        prototype: HTMLTpTimeInputElement;
        new (): HTMLTpTimeInputElement;
    };
    interface HTMLTpTimerElement extends Components.TpTimer, HTMLStencilElement {
    }
    var HTMLTpTimerElement: {
        prototype: HTMLTpTimerElement;
        new (): HTMLTpTimerElement;
    };
    interface HTMLTpTutorialModalElement extends Components.TpTutorialModal, HTMLStencilElement {
    }
    var HTMLTpTutorialModalElement: {
        prototype: HTMLTpTutorialModalElement;
        new (): HTMLTpTutorialModalElement;
    };
    interface HTMLElementTagNameMap {
        "tp-canvas": HTMLTpCanvasElement;
        "tp-canvas-controls": HTMLTpCanvasControlsElement;
        "tp-content": HTMLTpContentElement;
        "tp-icon": HTMLTpIconElement;
        "tp-input-zone": HTMLTpInputZoneElement;
        "tp-metadata-modal": HTMLTpMetadataModalElement;
        "tp-review-chat": HTMLTpReviewChatElement;
        "tp-routing-modal": HTMLTpRoutingModalElement;
        "tp-settings-modal": HTMLTpSettingsModalElement;
        "tp-time-input": HTMLTpTimeInputElement;
        "tp-timer": HTMLTpTimerElement;
        "tp-tutorial-modal": HTMLTpTutorialModalElement;
    }
}
declare namespace LocalJSX {
    interface TpCanvas {
        "height"?: number;
        "hostEl"?: HTMLElement;
        "width"?: number;
    }
    interface TpCanvasControls {
        "hostEl"?: HTMLElement;
        "submithandler"?: (e: Event) => void;
    }
    interface TpContent {
        "content"?: string;
        "sendingTo"?: string;
        "type"?: string;
    }
    interface TpIcon {
        "icon"?: any;
    }
    interface TpInputZone {
        "characterLimit"?: number;
        "round"?: number;
        "sendingTo"?: string;
    }
    interface TpMetadataModal {
        "enabled"?: boolean;
        "gameid"?: string;
        "metadata"?: Metadata;
    }
    interface TpReviewChat {
        "showAll"?: any;
        "stackProxy"?: any;
    }
    interface TpRoutingModal {
        "enabled"?: boolean;
        "firebase"?: BYFOFirebaseAdapter;
        "rejoin"?: RejoinData | null;
        "type"?: 'host' | 'join' | 'result' | undefined;
    }
    interface TpSettingsModal {
        "buildDate"?: { year: string; full: string; date: Date };
        "enabled"?: boolean;
        "store"?: any;
    }
    interface TpTimeInput {
        "initialValue"?: any;
        "maxMinutes"?: any;
        "maxSeconds"?: any;
        "placeholder"?: any;
        "timeError"?: string;
        "value"?: number;
    }
    interface TpTimer {
        "endtime"?: number;
    }
    interface TpTutorialModal {
        "enabled"?: boolean;
    }
    interface IntrinsicElements {
        "tp-canvas": TpCanvas;
        "tp-canvas-controls": TpCanvasControls;
        "tp-content": TpContent;
        "tp-icon": TpIcon;
        "tp-input-zone": TpInputZone;
        "tp-metadata-modal": TpMetadataModal;
        "tp-review-chat": TpReviewChat;
        "tp-routing-modal": TpRoutingModal;
        "tp-settings-modal": TpSettingsModal;
        "tp-time-input": TpTimeInput;
        "tp-timer": TpTimer;
        "tp-tutorial-modal": TpTutorialModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "tp-canvas": LocalJSX.TpCanvas & JSXBase.HTMLAttributes<HTMLTpCanvasElement>;
            "tp-canvas-controls": LocalJSX.TpCanvasControls & JSXBase.HTMLAttributes<HTMLTpCanvasControlsElement>;
            "tp-content": LocalJSX.TpContent & JSXBase.HTMLAttributes<HTMLTpContentElement>;
            "tp-icon": LocalJSX.TpIcon & JSXBase.HTMLAttributes<HTMLTpIconElement>;
            "tp-input-zone": LocalJSX.TpInputZone & JSXBase.HTMLAttributes<HTMLTpInputZoneElement>;
            "tp-metadata-modal": LocalJSX.TpMetadataModal & JSXBase.HTMLAttributes<HTMLTpMetadataModalElement>;
            "tp-review-chat": LocalJSX.TpReviewChat & JSXBase.HTMLAttributes<HTMLTpReviewChatElement>;
            "tp-routing-modal": LocalJSX.TpRoutingModal & JSXBase.HTMLAttributes<HTMLTpRoutingModalElement>;
            "tp-settings-modal": LocalJSX.TpSettingsModal & JSXBase.HTMLAttributes<HTMLTpSettingsModalElement>;
            "tp-time-input": LocalJSX.TpTimeInput & JSXBase.HTMLAttributes<HTMLTpTimeInputElement>;
            "tp-timer": LocalJSX.TpTimer & JSXBase.HTMLAttributes<HTMLTpTimerElement>;
            "tp-tutorial-modal": LocalJSX.TpTutorialModal & JSXBase.HTMLAttributes<HTMLTpTutorialModalElement>;
        }
    }
}
